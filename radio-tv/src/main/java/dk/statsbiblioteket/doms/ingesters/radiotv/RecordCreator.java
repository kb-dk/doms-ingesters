package dk.statsbiblioteket.doms.ingesters.radiotv;

import dk.statsbiblioteket.doms.client.DomsWSClient;
import dk.statsbiblioteket.doms.client.exceptions.NoObjectFound;
import dk.statsbiblioteket.doms.client.exceptions.ServerOperationFailed;
import dk.statsbiblioteket.doms.client.exceptions.XMLParseException;
import dk.statsbiblioteket.doms.client.relations.LiteralRelation;
import dk.statsbiblioteket.doms.client.relations.Relation;
import dk.statsbiblioteket.doms.transformers.common.CalendarUtils;
import dk.statsbiblioteket.doms.transformers.common.autogenerated.ObjectFactory;
import dk.statsbiblioteket.doms.transformers.common.autogenerated.ProgramBroadcast;
import dk.statsbiblioteket.doms.transformers.common.autogenerated.TvmeterProgram;
import dk.statsbiblioteket.util.xml.DOM;
import dk.statsbiblioteket.util.xml.XPathSelector;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPathExpressionException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;

/**
 * Created with IntelliJ IDEA.
 * User: abr
 * Date: 11/12/12
 * Time: 5:05 PM
 * To change this template use File | Settings | File Templates.
 */
public class RecordCreator {


    private DomsWSClient domsClient;
    private DocumentBuilder unSchemaedBuilder;


    public RecordCreator(DomsWSClient domsClient) throws ParserConfigurationException {
        this.domsClient = domsClient;
        DocumentBuilderFactory unschemaedFactory = DocumentBuilderFactory.newInstance();
        unSchemaedBuilder = unschemaedFactory.newDocumentBuilder();
    }

    /**
     * Ingests or update a program object
     *
     * @param radioTVMetadata Bibliographical metadata about the program.
     * @param existingPid     the existing pid of the program object, or null if it does not exist
     * @return PID of the newly created program object, created by the DOMS.
     *
     * @throws dk.statsbiblioteket.doms.client.exceptions.ServerOperationFailed    if creation or manipulation of the program object fails.
     * @throws javax.xml.xpath.XPathExpressionException should never happen. Means error in program with invalid XPath.
     * @throws dk.statsbiblioteket.doms.client.exceptions.XMLParseException        if any errors were encountered while processing the
     *                                  <code>radioTVMetadata</code> XML document.
     */
    public String ingestProgram(Document radioTVMetadata, String existingPid,List<String> oldIdentifiers)
            throws ServerOperationFailed, XPathExpressionException, XMLParseException, JAXBException, ParseException, ParserConfigurationException, MalformedURLException, URISyntaxException, NoObjectFound {
        List<String> filePIDs = getFilePids(radioTVMetadata);

        // First, fetch the PBCore metadata document node from the pre-ingest
        // document.
        Node radioTVPBCoreElement = Common.XPATH_SELECTOR
                .selectNode(radioTVMetadata, Common.RECORDING_PBCORE_DESCRIPTION_DOCUMENT_ELEMENT);

        // Extract old IDs from the pre-ingest file.
        List<String> listOfOldPIDs = new ArrayList<String>();
        listOfOldPIDs.addAll(oldIdentifiers);

        // Find or create program object.
        String programObjectPID;
        if (existingPid == null) {//not Exist
            // Create a program object in the DOMS and update the PBCore metadata
            // datastream with the PBCore metadata from the pre-ingest file.
            programObjectPID = domsClient.createObjectFromTemplate(Common.PROGRAM_TEMPLATE_PID, listOfOldPIDs, Common.COMMENT);
        } else { //Exists
            domsClient.unpublishObjects(Common.COMMENT, existingPid);
            // TODO Add old PIDs
            programObjectPID = existingPid;
        }

        // Add PBCore datastream
        Document pbCoreDataStreamDocument = createPBCoreDocForDoms(radioTVPBCoreElement);
        domsClient.updateDataStream(programObjectPID, Common.PROGRAM_PBCORE_DS_ID, pbCoreDataStreamDocument, Common.COMMENT);

        // Get the program title from the PBCore metadata and use that as the
        // object label for this program object.
        Node titleNode = Common.XPATH_SELECTOR
                .selectNode(radioTVPBCoreElement, "pbc:pbcoreTitle[pbc:titleType=\"titel\"]/pbc:title");
        String programTitle = titleNode.getTextContent();
        domsClient.setObjectLabel(programObjectPID, programTitle, Common.COMMENT);

        // Get the Ritzau metadata from the pre-ingest document and add it to
        // the Ritzau metadata data stream of the program object.
        Document ritzauOriginalDocument = createRitzauDocument(radioTVMetadata);
        domsClient.updateDataStream(programObjectPID, Common.RITZAU_ORIGINAL_DS_ID, ritzauOriginalDocument, Common.COMMENT);

        // Add the Gallup metadata
        Document gallupOriginalDocument = createGallupDocument(radioTVMetadata);
        domsClient.updateDataStream(programObjectPID, Common.GALLUP_ORIGINAL_DS_ID, gallupOriginalDocument, Common.COMMENT);

        // create the program broadcast from tvmeter or pbcore
        TvmeterProgram tvmeter = createTVMeterStructure(gallupOriginalDocument);
        ProgramBroadcast programBroadcast = makeProgramBroadcast(tvmeter, pbCoreDataStreamDocument);
        domsClient.updateDataStream(programObjectPID, Common.PROGRAM_BROADCAST_DS_ID,serializeObject(programBroadcast),Common.COMMENT);

        List<Relation> relations = domsClient.listObjectRelations(programObjectPID, Common.HAS_FILE_RELATION_TYPE);
        HashSet<String> existingRels = new HashSet<String>();
        for (Relation relation : relations) {
            if (!filePIDs.contains(relation.getSubjectPid())) {
                domsClient.removeObjectRelation((LiteralRelation) relation, Common.COMMENT);
            } else {
                existingRels.add(relation.getSubjectPid());
            }
        }
        for (String filePID : filePIDs) {
            if (!existingRels.contains(filePID)) {
                domsClient.addObjectRelation(programObjectPID, Common.HAS_FILE_RELATION_TYPE, filePID, Common.COMMENT);

            }
        }
        return programObjectPID;
    }

    private TvmeterProgram createTVMeterStructure(Document gallupOriginalDocument) throws JAXBException {
        TvmeterProgram tvmeter
                = (TvmeterProgram) JAXBContext.newInstance(TvmeterProgram.class.getPackage().getName()).createUnmarshaller().unmarshal(gallupOriginalDocument);
        return tvmeter;
    }

    /**
     * Utility method to create the Ritzau document to ingest
     *
     * @param radioTVMetadata Bibliographical metadata about the program.
     * @return A document containing the Ritzau metadata.
     */
    private Document createRitzauDocument(Document radioTVMetadata) {
        final Node ritzauPreingestElement = Common.XPATH_SELECTOR.selectNode(radioTVMetadata, Common.RITZAU_ORIGINALS_ELEMENT);

        // Build a Ritzau data document for the Ritzau data stream in the
        // program object.
        final Document ritzauOriginalDocument = unSchemaedBuilder.newDocument();
        final Element ritzauOriginalRootElement = ritzauOriginalDocument.createElement("ritzau_original");

        ritzauOriginalRootElement.setAttribute("xmlns", "http://doms.statsbiblioteket.dk/types/ritzau_original/0/1/#");
        ritzauOriginalDocument.appendChild(ritzauOriginalRootElement);

        ritzauOriginalRootElement.setTextContent(ritzauPreingestElement.getTextContent());
        return ritzauOriginalDocument;
    }

    /**
     * Utility method to create the Gallup document to ingest
     *
     * @param radioTVMetadata Bibliographical metadata about the program.
     * @return A document containing the Gallup metadata
     */
    private Document createGallupDocument(Node radioTVMetadata) {
        final Node gallupPreingestElement = Common.XPATH_SELECTOR.selectNode(radioTVMetadata, Common.GALLUP_ORIGINALS_ELEMENT);

        final Document gallupOriginalDocument = unSchemaedBuilder.newDocument();

        final Element gallupOriginalRootElement = gallupOriginalDocument.createElement("gallup_original");

        gallupOriginalRootElement.setAttribute("xmlns", "http://doms.statsbiblioteket.dk/types/gallup_original/0/1/#");

        gallupOriginalRootElement.setTextContent(gallupPreingestElement.getTextContent());

        gallupOriginalDocument.appendChild(gallupOriginalRootElement);
        return gallupOriginalDocument;
    }

    /**
     * Utility method to create the PBCore document to ingest
     *
     * @param radioTVPBCoreElement Element containing PBCore.
     * @return A document containing the PBCore metadata
     */
    private Document createPBCoreDocForDoms(Node radioTVPBCoreElement) {
        final Document pbCoreDataStreamDocument = unSchemaedBuilder.newDocument();

        // Import the PBCore metadata from the pre-ingest document and use it as
        // the contents for the PBCore metadata data stream of the program
        // object.
        final Node newPBCoreElement = pbCoreDataStreamDocument.importNode(radioTVPBCoreElement, true);

        pbCoreDataStreamDocument.appendChild(newPBCoreElement);
        return pbCoreDataStreamDocument;
    }

    /**
     * Ingest any missing file objects into the DOMS and return a list of PIDs
     * for all the DOMS file objects corresponding to the files listed in the
     * <code>radioTVMetadata</code> document.
     *
     * @param radioTVMetadata Metadata XML document containing the file information.
     * @return A <code>List</code> of PIDs of the radio-tv file objects created
     *         by the DOMS.
     *
     * @throws XPathExpressionException if any errors were encountered while processing the
     *                                  <code>radioTVMetadata</code> XML document.
     * @throws java.net.MalformedURLException    if a file element contains an invalid URL.
     * @throws ServerOperationFailed    if creation and retrieval of a radio-tv file object fails.
     * @throws java.net.URISyntaxException       if the format URI for the file is invalid.
     */
    private List<String> getFilePids(Document radioTVMetadata)
            throws XPathExpressionException, MalformedURLException, ServerOperationFailed, URISyntaxException, NoObjectFound {
        // Get the recording files XML element and process the file information.
        final NodeList recordingFiles = Common.XPATH_SELECTOR.selectNodeList(radioTVMetadata, Common.RECORDING_FILES_FILE_ELEMENT);

        // Ensure that the DOMS contains a file object for each recording file
        // element in the radio-tv XML document.
        final List<String> fileObjectPIDs = new ArrayList<String>();
        for (int nodeIndex = 0; nodeIndex < recordingFiles.getLength(); nodeIndex++) {
            final Node currentFileNode = recordingFiles.item(nodeIndex);

            final Node fileURLNode = Common.XPATH_SELECTOR.selectNode(currentFileNode, Common.FILE_URL_ELEMENT);
            final String fileURLString = fileURLNode.getTextContent();
            final URL fileURL = new URL(fileURLString);

            // Lookup or create file object.
            String fileObjectPID;
            fileObjectPID = domsClient.getFileObjectPID(fileURL);
            fileObjectPIDs.add(fileObjectPID);
        }
        return fileObjectPIDs;
    }


    /**
     * Make a ProgramBroadcast object. If Gallup (tvmeter) data is available use it, otherwise grab the information
     * from PBCore (ritzau).
     * @throws java.text.ParseException
     */
    public ProgramBroadcast makeProgramBroadcast(TvmeterProgram tvmeter, Document pbcore) throws ParseException {
        ProgramBroadcast programBroadcast = new ProgramBroadcast();
        Date startDate, endDate;
        XPathSelector xpath = DOM.createXPathSelector("pb", "http://www.pbcore.org/PBCore/PBCoreNamespace.html");
        Document dom = pbcore;

        if(tvmeter.getStartDate() != null && tvmeter.getEndDate() != null) {
            DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");
            startDate = fmt.parse(tvmeter.getStartDate());
            endDate = fmt.parse(tvmeter.getEndDate());
        } else {
            DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
            String startTime = xpath.selectString(dom, "//pb:dateAvailableStart");
            String stopTime =  xpath.selectString(dom, "//pb:dateAvailableEnd");
            startDate = fmt.parse(startTime);
            endDate = fmt.parse(stopTime);
        }

        String channelID = xpath.selectString(dom, "//pb:pbcorePublisher[/pb:publisherRole='channel_name']/pb:publisher");

        programBroadcast.setChannelId(channelID);
        programBroadcast.setTimeStart(CalendarUtils.getXmlGregorianCalendar(startDate));
        programBroadcast.setTimeStop(CalendarUtils.getXmlGregorianCalendar(endDate));

        return programBroadcast;

    }

    public Document serializeObject(ProgramBroadcast object) throws JAXBException, ParserConfigurationException {
        Document result = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
        JAXBElement<ProgramBroadcast> toSerialize = new ObjectFactory().createProgramBroadcast(object);
        JAXBContext.newInstance(object.getClass().getPackage().getName()).createMarshaller().marshal(toSerialize, result);
        return result;
    }


}
